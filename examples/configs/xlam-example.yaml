# ============================================================================
# XLAM v2 Format Example - Multi-Turn Agent Training Data
# ============================================================================
# Purpose: Generate multi-turn agent conversations and format to XLAM v2
# Usage: deepfabric generate examples/configs/xlam-example.yaml
# ============================================================================

dataset_system_prompt: |
  You are a helpful AI assistant with access to various tools.
  Use the available tools to help users accomplish their tasks.

# ============================================================================
# TOPIC GENERATION
# ============================================================================
topic_tree:
  topic_prompt: |
    Real-world scenarios requiring multiple tool interactions:
    - Weather and travel planning
    - Research and information gathering
    - Mathematical calculations and data analysis
    - Time-sensitive tasks and scheduling

  topic_system_prompt: "Generate diverse topics requiring multi-step tool usage."

  provider: "openai"
  model: "gpt-4o-mini"
  degree: 2
  depth: 2
  temperature: 0.8
  save_as: "xlam_topics.jsonl"

# ============================================================================
# DATA GENERATION - Multi-Turn Agent Conversations
# ============================================================================
data_engine:
  generation_system_prompt: |
    Generate realistic multi-turn conversations where the assistant uses tools
    to help users accomplish complex tasks requiring multiple steps.

    The assistant should:
    1. Think through the problem
    2. Use tools when needed
    3. Process tool results
    4. Provide helpful responses
    5. Handle follow-up questions

  instructions: |
    Create natural conversations showing:
    - Progressive problem solving with multiple tool calls
    - Reasoning about which tools to use
    - Combining information from different sources
    - Handling ambiguous requests
    - Multi-turn interactions (3-10 turns)

  # Generate multi-turn agent conversations
  conversation_type: "chain_of_thought"
  reasoning_style: "hybrid"
  agent_mode: "multi_turn"

  # Available tools for the agent
  available_tools:
    - "get_weather"
    - "search_web"
    - "calculate"
    - "get_time"
    - "get_stock_price"

  # Optional: Define custom tools with schemas
  # custom_tools:
  #   - name: "book_flight"
  #     description: "Book a flight from origin to destination"
  #     parameters:
  #       - name: "origin"
  #         type: "str"
  #         description: "Departure city"
  #         required: true
  #       - name: "destination"
  #         type: "str"
  #         description: "Arrival city"
  #         required: true
  #       - name: "date"
  #         type: "str"
  #         description: "Travel date (YYYY-MM-DD)"
  #         required: true

  max_tools_per_query: 5

  # Multi-turn conversation range
  min_turns: 2      # Minimum number of conversation turns
  max_turns: 6      # Maximum number of conversation turns
                    # Actual turns will vary naturally based on task completion

  provider: "openai"
  model: "gpt-4o"
  temperature: 0.8
  max_retries: 3
  max_tokens: 3000

# ============================================================================
# DATASET CONFIGURATION - Apply XLAM Formatter
# ============================================================================
dataset:
  save_as: "dataset_xlam_raw.jsonl"  # Raw DeepFabric format

  creation:
    num_steps: 2
    batch_size: 2
    sys_msg: true

  # Transform to XLAM v2 format
  formatters:
    # XLAM v2 format for agent training
    - name: "xlam_v2_format"
      template: "builtin://xlam_v2"
      output: "dataset_xlam.jsonl"
      config:
        validate_strict: true
        include_system_prompt: true
        min_turns: 3
        max_turns: 25  # Allow longer multi-turn conversations

# ============================================================================
# EXPECTED OUTPUT FORMAT
# ============================================================================
# The XLAM formatter will produce entries like:
#
# {
#   "conversations": [
#     {"from": "human", "value": "What's the weather like in Tokyo?"},
#     {"from": "gpt", "value": "I'll check the weather for you."},
#     {"from": "function_call", "value": "{\"name\": \"get_weather\", \"arguments\": {\"location\": \"Tokyo\"}}"},
#     {"from": "observation", "value": "Temperature: 22°C, Condition: Sunny"},
#     {"from": "gpt", "value": "The weather in Tokyo is sunny with a temperature of 22°C."}
#   ],
#   "tools": "[{\"name\": \"get_weather\", \"description\": \"...\", \"parameters\": {...}}]",
#   "system": "You are a helpful AI assistant with access to various tools..."
# }
# ============================================================================
